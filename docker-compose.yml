version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: secure-doc-postgres
    environment:
      POSTGRES_DB: SecureDocumentDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: securepass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: secure-doc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Backend API (.NET)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: secure-doc-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=SecureDocumentDB;Username=postgres;Password=securepass123
      - JwtSettings__SecretKey=your-super-secret-key-with-at-least-32-characters-for-security
      - JwtSettings__Issuer=SecureDocumentAPI
      - JwtSettings__Audience=SecureDocumentClient
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/bin
      - /app/obj
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: secure-doc-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_WS_URL=ws://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Rust File Processing Service
  rust-service:
    build:
      context: ./rust-service
      dockerfile: Dockerfile
    container_name: secure-doc-rust-service
    environment:
      - RUST_LOG=info
      - API_PORT=8080
    ports:
      - "8080:8080"
    volumes:
      - ./rust-service:/app
      - file_uploads:/app/uploads
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: secure-doc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: secure-doc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: secure-doc-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: secure-doc-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - secure-doc-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: secure-doc-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - secure-doc-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  file_uploads:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  secure-doc-network:
    driver: bridge
