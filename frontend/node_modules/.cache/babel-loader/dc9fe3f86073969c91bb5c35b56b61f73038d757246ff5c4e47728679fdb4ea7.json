{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance with base configuration\nconst apiClient = axios.create({\n  baseURL: `${API_BASE_URL}/api`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\napiClient.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        const response = await axios.post(`${API_BASE_URL}/api/auth/refresh-token`, {\n          refreshToken\n        });\n        const {\n          token,\n          refreshToken: newRefreshToken\n        } = response.data;\n        localStorage.setItem('authToken', token);\n        localStorage.setItem('refreshToken', newRefreshToken);\n        originalRequest.headers.Authorization = `Bearer ${token}`;\n        return apiClient(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh token failed, redirect to login\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  // Login user\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login', credentials);\n    return response.data;\n  },\n  // Register user\n  async register(userData) {\n    const response = await apiClient.post('/auth/register', userData);\n    return response.data;\n  },\n  // Logout user\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('refreshToken');\n    }\n  },\n  // Get current user\n  async getCurrentUser() {\n    const response = await apiClient.get('/auth/me');\n    return response.data;\n  },\n  // Change password\n  async changePassword(passwordData) {\n    await apiClient.post('/auth/change-password', passwordData);\n  },\n  // Request password reset\n  async requestPasswordReset(email) {\n    await apiClient.post('/auth/request-password-reset', {\n      email\n    });\n  },\n  // Reset password with token\n  async resetPassword(token, newPassword, confirmPassword) {\n    await apiClient.post('/auth/reset-password', {\n      token,\n      newPassword,\n      confirmNewPassword: confirmPassword\n    });\n  },\n  // Validate token\n  async validateToken(token) {\n    try {\n      const response = await apiClient.post('/auth/validate-token', {\n        token\n      });\n      return response.data.isValid;\n    } catch {\n      return false;\n    }\n  },\n  // Update profile\n  async updateProfile(profileData) {\n    const response = await apiClient.put('/auth/profile', profileData);\n    return response.data;\n  },\n  // Refresh token\n  async refreshToken(refreshToken) {\n    const response = await apiClient.post('/auth/refresh-token', {\n      refreshToken\n    });\n    return response.data;\n  },\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = localStorage.getItem('authToken');\n    return !!token;\n  },\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('authToken');\n  },\n  // Get stored refresh token\n  getRefreshToken() {\n    return localStorage.getItem('refreshToken');\n  },\n  // Store authentication data\n  storeAuthData(authResponse) {\n    localStorage.setItem('authToken', authResponse.token);\n    localStorage.setItem('refreshToken', authResponse.refreshToken);\n  },\n  // Clear authentication data\n  clearAuthData() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('refreshToken');\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","newRefreshToken","data","setItem","refreshError","removeItem","window","location","href","authService","login","credentials","register","userData","logout","getCurrentUser","get","changePassword","passwordData","requestPasswordReset","email","resetPassword","newPassword","confirmPassword","confirmNewPassword","validateToken","isValid","updateProfile","profileData","put","isAuthenticated","getToken","getRefreshToken","storeAuthData","authResponse","clearAuthData"],"sources":["/Users/pranaynookala/secure-document-management/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\nimport { LoginRequest, RegisterRequest, AuthResponse, User, ChangePasswordRequest, UpdateProfileRequest } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance with base configuration\nconst apiClient = axios.create({\n  baseURL: `${API_BASE_URL}/api`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token refresh\napiClient.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (refreshToken) {\n          const response = await axios.post(`${API_BASE_URL}/api/auth/refresh-token`, {\n            refreshToken,\n          });\n\n          const { token, refreshToken: newRefreshToken } = response.data;\n          localStorage.setItem('authToken', token);\n          localStorage.setItem('refreshToken', newRefreshToken);\n\n          originalRequest.headers.Authorization = `Bearer ${token}`;\n          return apiClient(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh token failed, redirect to login\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('refreshToken');\n        window.location.href = '/login';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n  // Login user\n  async login(credentials: LoginRequest): Promise<AuthResponse> {\n    const response = await apiClient.post<AuthResponse>('/auth/login', credentials);\n    return response.data;\n  },\n\n  // Register user\n  async register(userData: RegisterRequest): Promise<AuthResponse> {\n    const response = await apiClient.post<AuthResponse>('/auth/register', userData);\n    return response.data;\n  },\n\n  // Logout user\n  async logout(): Promise<void> {\n    try {\n      await apiClient.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('refreshToken');\n    }\n  },\n\n  // Get current user\n  async getCurrentUser(): Promise<User> {\n    const response = await apiClient.get<User>('/auth/me');\n    return response.data;\n  },\n\n  // Change password\n  async changePassword(passwordData: ChangePasswordRequest): Promise<void> {\n    await apiClient.post('/auth/change-password', passwordData);\n  },\n\n  // Request password reset\n  async requestPasswordReset(email: string): Promise<void> {\n    await apiClient.post('/auth/request-password-reset', { email });\n  },\n\n  // Reset password with token\n  async resetPassword(token: string, newPassword: string, confirmPassword: string): Promise<void> {\n    await apiClient.post('/auth/reset-password', {\n      token,\n      newPassword,\n      confirmNewPassword: confirmPassword,\n    });\n  },\n\n  // Validate token\n  async validateToken(token: string): Promise<boolean> {\n    try {\n      const response = await apiClient.post('/auth/validate-token', { token });\n      return response.data.isValid;\n    } catch {\n      return false;\n    }\n  },\n\n  // Update profile\n  async updateProfile(profileData: UpdateProfileRequest): Promise<User> {\n    const response = await apiClient.put<User>('/auth/profile', profileData);\n    return response.data;\n  },\n\n  // Refresh token\n  async refreshToken(refreshToken: string): Promise<AuthResponse> {\n    const response = await apiClient.post<AuthResponse>('/auth/refresh-token', { refreshToken });\n    return response.data;\n  },\n\n  // Check if user is authenticated\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('authToken');\n    return !!token;\n  },\n\n  // Get stored token\n  getToken(): string | null {\n    return localStorage.getItem('authToken');\n  },\n\n  // Get stored refresh token\n  getRefreshToken(): string | null {\n    return localStorage.getItem('refreshToken');\n  },\n\n  // Store authentication data\n  storeAuthData(authResponse: AuthResponse): void {\n    localStorage.setItem('authToken', authResponse.token);\n    localStorage.setItem('refreshToken', authResponse.refreshToken);\n  },\n\n  // Clear authentication data\n  clearAuthData(): void {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('refreshToken');\n  },\n};\n\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}