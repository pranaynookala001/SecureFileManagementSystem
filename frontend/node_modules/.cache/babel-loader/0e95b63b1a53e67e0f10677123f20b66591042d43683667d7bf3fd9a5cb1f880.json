{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\nimport authService from '../services/authService';\nexport const useAuth = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  // Check if user is authenticated on mount\n  const isAuthenticated = authService.isAuthenticated();\n\n  // Get current user data\n  const {\n    data: user,\n    isLoading,\n    error: userError\n  } = useQuery('currentUser', authService.getCurrentUser, {\n    enabled: isAuthenticated,\n    retry: false,\n    onError: () => {\n      // If getting user fails, clear auth data\n      authService.clearAuthData();\n    }\n  });\n\n  // Login mutation\n  const loginMutation = useMutation(authService.login, {\n    onSuccess: data => {\n      authService.storeAuthData(data);\n      queryClient.setQueryData('currentUser', data.user);\n      setError(null);\n      navigate('/dashboard');\n    },\n    onError: error => {\n      setError(error.message || 'Login failed');\n    }\n  });\n\n  // Register mutation\n  const registerMutation = useMutation(authService.register, {\n    onSuccess: data => {\n      authService.storeAuthData(data);\n      queryClient.setQueryData('currentUser', data.user);\n      setError(null);\n      navigate('/dashboard');\n    },\n    onError: error => {\n      setError(error.message || 'Registration failed');\n    }\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation(authService.logout, {\n    onSuccess: () => {\n      authService.clearAuthData();\n      queryClient.clear();\n      setError(null);\n      navigate('/login');\n    },\n    onError: error => {\n      setError(error.message || 'Logout failed');\n      // Still clear local data even if server logout fails\n      authService.clearAuthData();\n      queryClient.clear();\n      navigate('/login');\n    }\n  });\n\n  // Login function\n  const login = useCallback(async credentials => {\n    setError(null);\n    await loginMutation.mutateAsync(credentials);\n  }, [loginMutation]);\n\n  // Register function\n  const register = useCallback(async userData => {\n    setError(null);\n    await registerMutation.mutateAsync(userData);\n  }, [registerMutation]);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    setError(null);\n    await logoutMutation.mutateAsync();\n  }, [logoutMutation]);\n\n  // Clear error after a delay\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        setError(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n  return {\n    user: user || null,\n    isAuthenticated: isAuthenticated && !!user,\n    isLoading: isLoading || loginMutation.isLoading || registerMutation.isLoading || logoutMutation.isLoading,\n    login,\n    register,\n    logout,\n    error\n  };\n};\n_s(useAuth, \"cSOCh7d5pMoVUOY01wZXgh/x2VM=\", false, function () {\n  return [useNavigate, useQueryClient, useQuery, useMutation, useMutation, useMutation];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useQuery","useMutation","useQueryClient","useNavigate","authService","useAuth","_s","error","setError","navigate","queryClient","isAuthenticated","data","user","isLoading","userError","getCurrentUser","enabled","retry","onError","clearAuthData","loginMutation","login","onSuccess","storeAuthData","setQueryData","message","registerMutation","register","logoutMutation","logout","clear","credentials","mutateAsync","userData","timer","setTimeout","clearTimeout"],"sources":["/Users/pranaynookala/secure-document-management/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\nimport { User, LoginRequest, RegisterRequest, AuthResponse } from '../types';\nimport authService from '../services/authService';\n\ninterface UseAuthReturn {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (credentials: LoginRequest) => Promise<void>;\n  register: (userData: RegisterRequest) => Promise<void>;\n  logout: () => Promise<void>;\n  error: string | null;\n}\n\nexport const useAuth = (): UseAuthReturn => {\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  // Check if user is authenticated on mount\n  const isAuthenticated = authService.isAuthenticated();\n\n  // Get current user data\n  const {\n    data: user,\n    isLoading,\n    error: userError,\n  } = useQuery<User>('currentUser', authService.getCurrentUser, {\n    enabled: isAuthenticated,\n    retry: false,\n    onError: () => {\n      // If getting user fails, clear auth data\n      authService.clearAuthData();\n    },\n  });\n\n  // Login mutation\n  const loginMutation = useMutation<AuthResponse, Error, LoginRequest>(\n    authService.login,\n    {\n      onSuccess: (data) => {\n        authService.storeAuthData(data);\n        queryClient.setQueryData('currentUser', data.user);\n        setError(null);\n        navigate('/dashboard');\n      },\n      onError: (error) => {\n        setError(error.message || 'Login failed');\n      },\n    }\n  );\n\n  // Register mutation\n  const registerMutation = useMutation<AuthResponse, Error, RegisterRequest>(\n    authService.register,\n    {\n      onSuccess: (data) => {\n        authService.storeAuthData(data);\n        queryClient.setQueryData('currentUser', data.user);\n        setError(null);\n        navigate('/dashboard');\n      },\n      onError: (error) => {\n        setError(error.message || 'Registration failed');\n      },\n    }\n  );\n\n  // Logout mutation\n  const logoutMutation = useMutation<void, Error, void>(\n    authService.logout,\n    {\n      onSuccess: () => {\n        authService.clearAuthData();\n        queryClient.clear();\n        setError(null);\n        navigate('/login');\n      },\n      onError: (error) => {\n        setError(error.message || 'Logout failed');\n        // Still clear local data even if server logout fails\n        authService.clearAuthData();\n        queryClient.clear();\n        navigate('/login');\n      },\n    }\n  );\n\n  // Login function\n  const login = useCallback(async (credentials: LoginRequest) => {\n    setError(null);\n    await loginMutation.mutateAsync(credentials);\n  }, [loginMutation]);\n\n  // Register function\n  const register = useCallback(async (userData: RegisterRequest) => {\n    setError(null);\n    await registerMutation.mutateAsync(userData);\n  }, [registerMutation]);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    setError(null);\n    await logoutMutation.mutateAsync();\n  }, [logoutMutation]);\n\n  // Clear error after a delay\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        setError(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  return {\n    user: user || null,\n    isAuthenticated: isAuthenticated && !!user,\n    isLoading: isLoading || loginMutation.isLoading || registerMutation.isLoading || logoutMutation.isLoading,\n    login,\n    register,\n    logout,\n    error,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}